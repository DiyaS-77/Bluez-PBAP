def test_application_clicked(self):
    """
       Create and display the main testing application GUI.

       This interface consists of:
       - A profile selection list
       - Bluetooth controller details
       - A text browser showing methods related to selected profile
       - Three log viewers: Bluetoothd, PulseAudio, and HCI Dump
       - A back button to return to the previous window

       args: None
       returns: None
    """

    self.bluetooth_device_manager = BluetoothDeviceManager(self.interface)
    self.bluez_logger = BluetoothDeviceManager(log_path=self.log_path)
    self.restart_daemons()

    self.main_grid_layout = QGridLayout()

    bold_font = QFont()
    bold_font.setBold(True)
    self.profiles_list_widget = QListWidget()
    self.profiles_list_label = QLabel("List of Profiles:")
    self.profiles_list_label.setFont(bold_font)
    self.profiles_list_label.setStyleSheet("color:black")
    self.main_grid_layout.addWidget(self.profiles_list_label, 0, 0)
    self.profiles_list_widget.addItem("GAP")
    self.profiles_list_widget.setFont(bold_font)
    self.profiles_list_widget.setStyleSheet("border: 2px solid black; color: black; background: transparent;")
    self.profiles_list_widget.itemSelectionChanged.connect(self.profile_selected)
    self.profiles_list_widget.setFixedWidth(350)
    self.main_grid_layout.addWidget(self.profiles_list_widget, 1, 0, 2, 2)

    controller_details_widget = QWidget()
    controller_details_layout = QVBoxLayout()
    controller_details_widget.setStyleSheet("border: 2px solid black; color: black; background: transparent;")
    controller_details_widget.setFont(bold_font)
    self.main_grid_layout.addWidget(controller_details_widget, 3, 0, 8, 2)
    controller_details_layout.setContentsMargins(0, 0, 0, 0)
    controller_details_layout.setSpacing(0)

    self.bluez_logger.get_controller_details(interface=self.interface)

    self.controller.name = self.bluez_logger.name
    self.controller.bd_address = self.bluez_logger.bd_address
    self.controller.link_policy = self.bluez_logger.link_policy
    self.controller.lmp_version = self.bluez_logger.lmp_version
    self.controller.link_mode = self.bluez_logger.link_mode
    self.controller.hci_version = self.bluez_logger.hci_version
    self.controller.manufacturer = self.bluez_logger.manufacturer

    controller_details_label = QLabel("Controller Details:")
    controller_details_label.setFont(bold_font)
    controller_details_layout.addWidget(controller_details_label)

    def add_detail_row(label_text, value_text):
        layout = QHBoxLayout()
        label = QLabel(label_text)
        label.setFont(bold_font)
        label.setStyleSheet("border-right: 1px solid black; border-bottom: 0px solid black;")
        layout.addWidget(label)
        value = QLabel(value_text)
        value.setStyleSheet("border-left: 1px solid black; border-bottom: 0px solid black;")
        layout.addWidget(value)
        controller_details_layout.addLayout(layout)

    add_detail_row("Controller Name:", self.bluez_logger.name)
    add_detail_row("Controller Address:", self.bluez_logger.bd_address)
    add_detail_row("Link Mode:", self.bluez_logger.link_mode)
    add_detail_row("Link Policy:", self.bluez_logger.link_policy)
    add_detail_row("HCI Version:", self.bluez_logger.hci_version)
    add_detail_row("LMP Version:", self.bluez_logger.lmp_version)
    add_detail_row("Manufacturer:", self.bluez_logger.manufacturer)

    controller_details_widget.setLayout(controller_details_layout)
    controller_details_widget.setFixedWidth(350)

    profile_description_label = QLabel("Profile Methods or Procedures:")
    profile_description_label.setFont(bold_font)
    profile_description_label.setStyleSheet("color: black;")
    self.main_grid_layout.addWidget(profile_description_label, 0, 2)
    self.profile_description_text_browser = QTextBrowser()
    self.profile_description_text_browser.setStyleSheet("background: transparent;color:black;border: 2px solid black;")
    self.profile_description_text_browser.setFixedWidth(500)
    self.main_grid_layout.addWidget(self.profile_description_text_browser, 1, 2, 10, 2)

    dump_logs_label = QLabel("Dump Logs:")
    dump_logs_label.setFont(bold_font)
    dump_logs_label.setStyleSheet("color: black;")
    self.main_grid_layout.addWidget(dump_logs_label, 0, 4)
    self.dump_logs_text_browser = QTabWidget()
    self.dump_logs_text_browser.setStyleSheet("""
        QTabWidget::pane {
            background: transparent;
            border: 2px solid black;
            margin-top: 8px; 
        }
        QTabBar::tab {
            background: transparent;
            color: black;
            border-top: 2px solid black;
            border-bottom: 2px solid black;
            border-left: 2px solid black;
            border-right: none;
            padding: 7px;
            height: 20px;
        }
        QTabBar::tab:last {
            border-right: 2px solid black;
        }
    """)
    tab_bar = self.dump_logs_text_browser.tabBar()
    tab_bar.setUsesScrollButtons(False)
    tab_bar.setExpanding(True)
    self.dump_logs_text_browser.setFixedWidth(400)
    self.main_grid_layout.addWidget(self.dump_logs_text_browser, 1, 4, 10, 2)

    transparent_textedit_style = """
        QTextEdit {
            background: transparent;
            color: black;
            border: none;
        }
    """

    self.bluetoothd_log_text_browser = QTextEdit()
    self.bluetoothd_log_text_browser.setFont(bold_font)
    self.bluetoothd_log_text_browser.setReadOnly(True)
    self.bluetoothd_log_text_browser.setStyleSheet(transparent_textedit_style)

    self.pulseaudio_log_text_browser = QTextEdit()
    self.pulseaudio_log_text_browser.setFont(bold_font)
    self.pulseaudio_log_text_browser.setReadOnly(True)
    self.pulseaudio_log_text_browser.setStyleSheet(transparent_textedit_style)

    self.hci_dump_log_text_browser = QTextEdit()
    self.hci_dump_log_text_browser.setFont(bold_font)
    self.hci_dump_log_text_browser.setReadOnly(True)
    self.hci_dump_log_text_browser.setStyleSheet(transparent_textedit_style)

    self.dump_logs_text_browser.addTab(self.bluetoothd_log_text_browser, "Bluetoothd_Logs")
    self.dump_logs_text_browser.addTab(self.pulseaudio_log_text_browser, "Pulseaudio_Logs")
    self.dump_logs_text_browser.addTab(self.hci_dump_log_text_browser, "HCI_Dump_Logs")

    self.bluetoothd_log_file_path = self.bluez_logger.start_bluetoothd_logs()
    self.pulseaudio_log_file_path = self.bluez_logger.start_pulseaudio_logs()
    self.hci_log_file_path = self.bluez_logger.start_dump_logs(interface=self.interface)

    self.bluetoothd_log_file_fd = open(self.bluetoothd_log_file_path, "r")
    self.pulseaudio_log_file_fd = open(self.pulseaudio_log_file_path, "r")
    self.hci_log_file_fd = open(self.hci_log_file_path, "r")

    self.bluetoothd_log_text_browser.append(self.bluetoothd_log_file_fd.read())
    self.pulseaudio_log_text_browser.append(self.pulseaudio_log_file_fd.read())
    self.hci_dump_log_text_browser.append(self.hci_log_file_fd.read())

    self.bluetoothd_file_position = self.bluetoothd_log_file_fd.tell()
    self.pulseaudio_file_position = self.pulseaudio_log_file_fd.tell()
    self.hci_file_position = self.hci_log_file_fd.tell()

    self.log_timer = QTimer()
    self.log_timer.timeout.connect(self.update_logs)
    self.log_timer.start(1000)

    back_button = QPushButton("Back")
    back_button.setFixedSize(100, 40)
    back_button.setStyleSheet("""
        QPushButton {
            font-size: 16px;
            padding: 6px;
            background-color: black;
            color: white;
            border: 2px solid gray;
            border-radius: 6px;
        }
        QPushButton:hover {
            background-color: #333333;
        }
    """)
    back_button.clicked.connect(lambda: self.back_callback())
    back_button_layout = QHBoxLayout()
    back_button_layout.addWidget(back_button)
    back_button_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
    self.main_grid_layout.addLayout(back_button_layout, 999, 5)

    self.setLayout(self.main_grid_layout)
    QTimer.singleShot(1000, self.load_connected_devices)

def update_logs(self):
    if self.bluetoothd_log_file_fd:
        self.bluetoothd_log_file_fd.seek(self.bluetoothd_file_position)
        content = self.bluetoothd_log_file_fd.read()
        if content:
            self.bluetoothd_log_text_browser.append(content)
            self.bluetoothd_file_position = self.bluetoothd_log_file_fd.tell()

    if self.pulseaudio_log_file_fd:
        self.pulseaudio_log_file_fd.seek(self.pulseaudio_file_position)
        content = self.pulseaudio_log_file_fd.read()
        if content:
            self.pulseaudio_log_text_browser.append(content)
            self.pulseaudio_file_position = self.pulseaudio_log_file_fd.tell()

    if self.hci_log_file_fd:
        self.hci_log_file_fd.seek(self.hci_file_position)
        content = self.hci_log_file_fd.read()
        if content:
            self.hci_dump_log_text_browser.append(content)
            self.hci_file_position = self.hci_log_file_fd.tell()